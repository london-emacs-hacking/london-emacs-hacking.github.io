#+TITLE: Dojo | Emacs London
#+OPTIONS: html-style:nil toc:nil title:nil
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="assets/css/style.css" />
#+EXPORT_FILE_NAME: ./dojo.html
#+AUTHOR: Emacs London

# Local Variables:
# org-html-preamble: "<center><a href=\"/index.html\"><img src=\"./assets/images/emacs-london-logo.png\" alt=\"emacs-london image\" class=\"logo\"></a></center>"
# org-html-head: nil
# org-html-postamble-format: '("en" " <p class=\"date\">Date: %d</p> ")
# End:

* Emacs Lisp dojo

A dojo is a meetup format that involves coding on projects or exercises, usually
in groups, for the purpose of practice and learning. There are many dojo meetups
that run for different audiences. Attendees may be familiar with the [[http://www.londonclojurians.org/code-dojo/][London
Clojure Dojo]].

Our format is:

1. Suggest ideas for projects.
2. Break into groups of 2-4, each focusing on a project.
3. Work for 90 minutes.
4. Present some learnings, or maybe head straight to a pub!


* Project ideas

Some ideas to get the conversation started:

- Write your own modeline.
- Write a syntax highlighter for a language of your choice.
- Build a fuzzy browser search interface to replace Spotlight/Alfred. You can
  use [[http://xenodium.com/emacs-utilities-for-your-os/][Alvaro's excellent post]] as a starting point..
- Build a Tic-Tac-Toe game in Emacs.
- Write a test runner that can run tests and display their output.

*Alternatively, you can work on (or contribute to) the exercises below!*. You may
find them useful if you're new to Elisp, or if you're just stuck for ideas.



* Exercises

These are some exercises to help learn and explore Emacs and Elisp. The aim is
to fill in the functions labelled ~__~, so that all the ~Pass:~ messages show ~t~
instead of ~nil~.

They are inspired by the interactive Clojure exercises on [[https://www.google.co.uk/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&ved=2ahUKEwiTyNypxavnAhXLQEEAHVdVB5gQjBAwAXoECAgQCA&url=http%3A%2F%2Fwww.4clojure.com%2Fproblems&usg=AOvVaw0pa24yxcj-qETh0ze7m_08][4Clojure]].

** Working with this org-mode file

This web page is written as an org-mode file, which means you can [[https://github.com/london-emacs-hacking/london-emacs-hacking.github.io/blob/master/dojo.org][view it on
github]], open it in Emacs, and execute the code snippets by moving to a code
block and pressing ~C-c C-c~. You can also open and edit the code block in
emacs-lisp mode by pressing ~C-c '~.

** Resources to help

If you're new to Elisp, the resources below can act as starting points or
references.

- Emacs itself: there are some very useful features to help you learn about
  the language, available functions, current values of your variables, and
  more. These are all accessible via ~C-h~. You can [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html][start reading about them in
  the manual]].

- The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][Emacs Lisp reference manual]] is very comprehensive if you know what you
  want to read about. This can also be read within Emacs by using ~C-h i m Elisp RET~.

- Steve Yegge wrote [[https://steve-yegge.blogspot.com/2008/01/emergency-elisp.html][a brief overview of all the language features]]. It's quite
  old now but is still a nice place to start.

- [[http://ergoemacs.org/emacs/elisp.html][Xah Lee's practical Emacs Lisp guide]] may be easier to digest than the full
  manual, and covers a lot of topics.

** Contributing

Changes and new exercises are very welcome! Please [[https://github.com/london-emacs-hacking/london-emacs-hacking.github.io][submit PRs on github]].

** Table of contents

| Title                                            |
|--------------------------------------------------|
| [[Strings - uppercase]]                              |
| [[Penultimate element]]                              |
| [[Fizzbuzz]]                                         |
| [[Anagram finder]]                                   |
| [[Make an HTTP request and parse the JSON response]] |
| [[Parse data from an org buffer]]                    |
| [[Advice: 2 + 2 = 5]]                                |

** Strings - uppercase

Transform the given string into uppercase:

#+begin_src emacs-lisp
  (defun __ (s) nil)

  (let* ((res (__ "helloworld"))
         (pass (string= res "HELLOWORLD")))
    (format "Pass:%s\n%s" pass res))
#+end_src

** Penultimate element

Return the second last element in an item. If there is only one item in the
list, return nil.

#+begin_src emacs-lisp
  (defun __ (li) nil)

  (let* ((res1 (__ '(1 2 3 4 5)))
         (pass1 (equal res1 4))
         (res2 (__ '("a" "b" "c")))
         (pass2 (equal res2 "b"))
         (res3 (__ '([1 2] [3 4])))
         (pass3 (equal res3 [1 2]))
         (res4 (__ '(1)))
         (pass4 (equal res4 nil)))

    (format "Pass:%s\n%s\n\nPass:%s:\n%s\n\nPass:%s\n%s\n\nPass:%s\n%s"
            pass1 res1 pass2 res2 pass3 res3 pass4 res4))
#+end_src

(Ported from [[http://www.4clojure.com/problem/20][4Clojure #20]])

** Fizzbuzz

Return a list with the results of fizzbuzz for a range of 1-100. This means:

- If the number is divisible by 3, the value is "Fizz".
- If the number is divisible by 5, the value is "Buzz".
- If the number is divisible by 3 and 5, the value is "FizzBuzz".

#+begin_src emacs-lisp
  (defun __ () nil)

  (let* ((expected '(1 2 "Fizz" 4 "Buzz" "Fizz" 7 8 "Fizz" "Buzz" 11 "Fizz" 13 14 "FizzBuzz" 16 17
                       "Fizz" 19 "Buzz" "Fizz" 22 23 "Fizz" "Buzz" 26 "Fizz" 28 29 "FizzBuzz" 31 32
                       "Fizz" 34 "Buzz" "Fizz" 37 38 "Fizz" "Buzz" 41 "Fizz" 43 44 "FizzBuzz" 46 47
                       "Fizz" 49 "Buzz" "Fizz" 52 53 "Fizz" "Buzz" 56 "Fizz" 58 59 "FizzBuzz" 61 62
                       "Fizz" 64 "Buzz" "Fizz" 67 68 "Fizz" "Buzz" 71 "Fizz" 73 74 "FizzBuzz" 76 77
                       "Fizz" 79 "Buzz" "Fizz" 82 83 "Fizz" "Buzz" 86 "Fizz" 88 89 "FizzBuzz" 91 92
                       "Fizz" 94 "Buzz" "Fizz" 97 98 "Fizz" "Buzz" ))
         (res (__))
         (pass (equal res expected)))
    (format "Pass:%s\n%s" pass res))
#+end_src

** Anagram finder

Write a function which finds all the anagrams in a given vector of words. Your
function should return a list of lists, where each sub-list is a group of words
which are anagrams of each other. Words without any anagrams should not be
included in the result.

#+begin_src emacs-lisp
  (defun __ (v) nil)

  (let* ((res (__ ["meat" "mat" "team" "mate" "eat"]))
         (pass (equal res '(("meat" "team" "mate"))))
         (res2 (__ ["veer" "lake" "item" "kale" "mite" "ever"]))
         (pass2 (equal res '(("veer" "ever") ("lake" "kale") ("mite item")))))

    (format "Pass:%s\n%s\n\nPass:%s\n%s" pass res pass2 res2))
#+end_src

(Ported from [[http://www.4clojure.com/problem/77][4Clojure #77]]).

** Make an HTTP request and parse the JSON response

Make an HTTP request to jsontest.com and put the parsed JSON response into a
hash table.

For clarity, the literal hash table below represents ~{"one": "two", "three": "four"}~.

#+begin_src emacs-lisp
  (defun __ (url) nil)

  (let* ((res (__ "http://echo.jsontest.com/one/two/three/four"))
         (pass (equal res #s(hash-table size 2 data ("one" "two" "three" "four")))))
    (format "Pass:%s\n%s" pass res))
#+end_src

** Parse data from an org buffer

Given the string below, convert it to an org-mode buffer, parse out the headline
and tags, and return a list where each item looks like ~("HEADLINE" . '("TAG1" "TAG2"))~.

#+begin_src emacs-lisp
  (defun __ (s) nil)

  (let* ((org-string "* Headline one    :foo:
  ,* Headline two     :foo:bar:
  ,* Headline three   :bar:")
         (res (__ org-string))
         (pass (equal res '(("Headline one" . ("foo"))
                            ("Headline two" . ("foo" "bar"))
                            ("Headline three" . ("bar"))))))
         (format "Pass:%s\n%s" pass res))
#+end_src


** Advice: 2 + 2 = 5

The advice feature allows you to decorate other functions. This means you can
patch existing code to change its behaviour.

The first time your function is called, it should advise the ~+~ function so that
~(+ 2 2)~ returns 5. The second time it's called, it should remove the advise, so
that subsequent calls to ~+~ return 4 again.

#+begin_src emacs-lisp
  (defun __ () nil)

  (let* ((res1 (+ 2 2))
         (pass1 (equal res1 4))
         (res2 (progn (__) (+ 2 2)))
         (pass2 (equal res2 5))
         (res3 (progn (__) (+ 2 2)))
         (pass3 (equal res3 4)))
    (format "Pass:%s\n%s\n\nPass:%s:\n%s\n\nPass:%s\n%s"
            pass1 res1 pass2 res2 pass3 res3))
#+end_src
